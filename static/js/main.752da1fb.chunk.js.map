{
    "version": 3,
    "sources": [
        "assets/excel.svg",
        "components/navbar.tsx",
        "components/footer/copy_right.tsx",
        "components/footer/footer.tsx",
        "App.tsx",
        "reportWebVitals.ts",
        "index.tsx"
    ],
    "names": [
        "Navbar",
        "React",
        "useState",
        "opened",
        "setOpened",
        "className",
        "x-data",
        "href",
        "onClick",
        "fill",
        "viewBox",
        "fill-rule",
        "d",
        "clip-rule",
        "CopyRight",
        "id",
        "target",
        "Footer",
        "_",
        "require",
        "App",
        "previewQrCode",
        "setPreviewQrCode",
        "qrInputValue",
        "setQrInputValue",
        "qrCodeArray",
        "setQrCodeArray",
        "useEffect",
        "val",
        "QRCode",
        "toDataURL",
        "then",
        "url",
        "console",
        "log",
        "catch",
        "err",
        "error",
        "RenderQrCode",
        "alt",
        "src",
        "downloadZip",
        "a",
        "zip",
        "jszip",
        "length",
        "Promise",
        "resolve",
        "forEach",
        "value",
        "input",
        "reject",
        "file",
        "split",
        "base64",
        "generateAsync",
        "type",
        "content",
        "saveAs",
        "handleChange",
        "event",
        "QrcodeInput",
        "ref",
        "focus",
        "placeholder",
        "onChange",
        "MyDropzone",
        "onDrop",
        "useCallback",
        "acceptedFiles",
        "name",
        "reader",
        "FileReader",
        "onabort",
        "onerror",
        "onload",
        "evt",
        "bstr",
        "result",
        "wb",
        "XLSX",
        "wsname",
        "SheetNames",
        "ws",
        "Sheets",
        "data",
        "sheet_to_json",
        "header",
        "raw",
        "final",
        "compact",
        "flatten",
        "readAsBinaryString",
        "useDropzone",
        "getRootProps",
        "getInputProps",
        "excelLogo",
        "fileName",
        "toCanvas",
        "errorCorrectionLevel",
        "canvas",
        "toBlob",
        "blob",
        "stroke",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-width",
        "reportWebVitals",
        "onPerfEntry",
        "Function",
        "getCLS",
        "getFID",
        "getFCP",
        "getLCP",
        "getTTFB",
        "ReactDOM",
        "render",
        "StrictMode",
        "document",
        "getElementById"
    ],
    "mappings": "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",
    "file": "static/js/main.752da1fb.chunk.js",
    "sourcesContent": [
        "export default __webpack_public_path__ + \"static/media/excel.28bb5d07.svg\";",
        "import React from 'react'\nimport '../App.css';\n\nconst Navbar = () => {\n    const [opened, setOpened] = React.useState(false);\n\n    const toggleNav = () => {\n        setOpened(!opened);\n    }\n\n\n    return (\n        <div>\n            <div className=\"w-full text-gray-700 bg-white dark-mode:text-gray-200 dark-mode:bg-gray-800\">\n                <div x-data=\"{ open: false }\" className=\"flex flex-col max-w-screen-xl px-4 mx-auto md:items-center md:justify-between md:flex-row md:px-6 lg:px-8\">\n                    <div className=\"p-4 flex flex-row items-center justify-between\">\n                        <a href=\"#\" className=\"text-lg font-semibold tracking-widest text-gray-900 uppercase rounded-lg dark-mode:text-white focus:outline-none focus:shadow-outline\">\n                            QR generator\n                        </a>\n                        <button className=\"md:hidden rounded-lg focus:outline-none focus:shadow-outline\" onClick={() => toggleNav()}>\n                            <svg fill=\"currentColor\" viewBox=\"0 0 20 20\" className=\"w-6 h-6\">\n                                <path className={!opened ? 'inline-block' : 'hidden'} fill-rule=\"evenodd\" d=\"M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM9 15a1 1 0 011-1h6a1 1 0 110 2h-6a1 1 0 01-1-1z\" clip-rule=\"evenodd\"></path>\n                                <path className={opened ? 'inline-block' : 'hidden'} fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path>\n                            </svg>\n                        </button>\n                    </div>\n                    <nav className={\"flex-col flex-grow pb-4 md:pb-0 md:flex md:justify-end md:flex-row\" + (opened ? ' flex' : ' hidden')}>\n                        <a className=\"px-4 py-2 mt-2 text-sm font-semibold text-gray-900 bg-gray-200 rounded-lg dark-mode:bg-gray-700 dark-mode:hover:bg-gray-600 dark-mode:focus:bg-gray-600 dark-mode:focus:text-white dark-mode:hover:text-white dark-mode:text-gray-200 md:mt-0 hover:text-gray-900 focus:text-gray-900 hover:bg-gray-200 focus:bg-gray-200 focus:outline-none focus:shadow-outline\" href=\"#\">Blog</a>\n                        <a className=\"px-4 py-2 mt-2 text-sm font-semibold bg-transparent rounded-lg dark-mode:bg-transparent dark-mode:hover:bg-gray-600 dark-mode:focus:bg-gray-600 dark-mode:focus:text-white dark-mode:hover:text-white dark-mode:text-gray-200 md:mt-0 md:ml-4 hover:text-gray-900 focus:text-gray-900 hover:bg-gray-200 focus:bg-gray-200 focus:outline-none focus:shadow-outline\" href=\"#\">Portfolio</a>\n                        <a className=\"px-4 py-2 mt-2 text-sm font-semibold bg-transparent rounded-lg dark-mode:bg-transparent dark-mode:hover:bg-gray-600 dark-mode:focus:bg-gray-600 dark-mode:focus:text-white dark-mode:hover:text-white dark-mode:text-gray-200 md:mt-0 md:ml-4 hover:text-gray-900 focus:text-gray-900 hover:bg-gray-200 focus:bg-gray-200 focus:outline-none focus:shadow-outline\" href=\"#\">About</a>\n                        <a className=\"px-4 py-2 mt-2 text-sm font-semibold bg-transparent rounded-lg dark-mode:bg-transparent dark-mode:hover:bg-gray-600 dark-mode:focus:bg-gray-600 dark-mode:focus:text-white dark-mode:hover:text-white dark-mode:text-gray-200 md:mt-0 md:ml-4 hover:text-gray-900 focus:text-gray-900 hover:bg-gray-200 focus:bg-gray-200 focus:outline-none focus:shadow-outline\" href=\"#\">Contact</a>\n                    </nav >\n                </div >\n            </div >\n\n        </div >\n    )\n}\n\nexport default Navbar;\n",
        "import React from 'react'\n\nfunction CopyRight() {\n    return (\n        <div className=\"flex flex-wrap items-center md:justify-between justify-center\">\n            <div className=\"w-full md:w-4/12 px-4 mx-auto text-center\">\n                <div className=\"text-sm text-blueGray-500 font-semibold py-1\">\n                    Copyright © <span id=\"get-current-year\">2021</span>\n                    <a href=\"#\" className=\"text-blueGray-500 hover:text-gray-800\" target=\"_blank\" /> QR GENERATOR\n                    <a href=\"#\" className=\"text-blueGray-500 hover:text-blueGray-800\"></a>.\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CopyRight;\n",
        "import React from 'react'\nimport CopyRight from './copy_right'\nimport FooterContent from './footer_content'\n\nfunction Footer() {\n    return (\n        <div className=\"relative bg-blueGray-200 pt-8 pb-6\">\n            <div className=\"container mx-auto px-4\">\n                {/* <FooterContent /> */}\n                <hr className=\"my-6 border-blueGray-300\" />\n                <CopyRight />\n            </div>\n        </div>\n    )\n}\n\nexport default Footer\n",
        "import React, { useCallback } from 'react';\nimport './App.css';\nimport { saveAs } from 'file-saver';\nimport QRCode from 'qrcode'\nimport { useDropzone } from 'react-dropzone';\nimport * as XLSX from 'xlsx';\nimport jszip from 'jszip';\nimport { resolve } from 'dns';\nimport excelLogo from './assets/excel.svg';\nimport Navbar from './components/navbar';\nimport Footer from './components/footer/footer';\n\nvar _ = require('lodash');\n\n\n//TODO:excel file validation\nfunction App() {\n    const [previewQrCode, setPreviewQrCode] = React.useState<any>('');\n    const [qrInputValue, setQrInputValue] = React.useState<any>('');\n    const [qrCodeArray, setQrCodeArray] = React.useState<any>([]);\n\n    React.useEffect(() => {\n        const val = qrInputValue ? qrInputValue : 'https://www.qr-generator-online.com/';\n        QRCode.toDataURL(val)\n            .then((url: any) => {\n                console.log(\"URL ==>\", url);\n                setPreviewQrCode(url);\n            })\n            .catch((err: any) => {\n                console.error(\"Error ==>\", err)\n            });\n\n    }, [qrInputValue]);\n\n\n    const RenderQrCode = () => {\n        return <img className=\"mt-4\" alt=\"qrcode\" src={previewQrCode} />\n    };\n\n    const DownloadQrCode = () => {\n\n        const val = qrInputValue ? qrInputValue : 'https://www.qr-generator-online.com/';\n        const fileName = `${qrInputValue ? qrInputValue : 'QRcode'}.png`;\n\n        QRCode.toCanvas(val, { errorCorrectionLevel: 'H' }, function (err: any, canvas: any) {\n            if (err) throw err;\n\n            canvas.toBlob(function (blob: any) {\n                saveAs(blob, fileName);\n            });\n\n        });\n\n    }\n\n    const exportToBlob = (input: any) => {\n\n        return new Promise((resolve, reject) => {\n\n            QRCode.toDataURL(input)\n                .then((url: any) => {\n                    console.log(\"zip URL ==>\", url);\n                    resolve(url);\n                })\n                .catch((err: any) => {\n                    console.error(\"Error ==>\", err)\n                });\n        });\n\n    };\n\n    const downloadZip = async () => {\n        var zip = new jszip();\n\n        if (qrCodeArray.length <= 0) { return;}\n\n        new Promise(resolve => {\n\n            qrCodeArray.forEach((value: any) => {\n\n                exportToBlob(value).then((url: any) => {\n                    zip.file(`${value}.png`, url.split('base64,')[1], { base64: true });\n                    resolve(true);\n                });\n            });\n\n        }).then(() => {\n\n            zip.generateAsync({ type: \"blob\" }).then(function (content) {\n                saveAs(content, \"QRcodes.zip\");\n                setQrCodeArray([]);\n            });\n\n        });\n\n    }\n\n\n    const handleChange = (event: any) => {\n        setQrInputValue(event.target.value);\n    }\n\n    const QrcodeInput = () => {\n        return (\n            <form className=\"w-full\">\n                <input\n                    className=\"appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                    ref={(input) => {\n                        if (input) {\n                            input.focus();\n                        }\n                    }}\n                    type=\"text\" placeholder=\"URL/Text\"\n                    value={qrInputValue} onChange={handleChange} />\n            </form>\n        );\n    };\n\n    const MyDropzone = () => {\n        const onDrop = useCallback((acceptedFiles) => {\n            acceptedFiles.forEach((file: any) => {\n\n                var name = file.name;\n                const reader = new FileReader();\n\n                reader.onabort = () => console.log('file reading was aborted')\n                reader.onerror = () => console.log('file reading has failed')\n                reader.onload = (evt: any) => {\n\n                    const bstr = evt.target.result;\n                    const wb = XLSX.read(bstr, { type: 'binary' });\n\n                    console.log(\"wb\", wb);\n\n                    /* Get first worksheet */\n                    const wsname = wb.SheetNames[0];\n                    const ws = wb.Sheets[wsname];\n                    /* Convert array of arrays */\n                    const data: any = XLSX.utils.sheet_to_json(ws, { header: 1, raw: false });\n\n                    /* Update state */\n                    const final = _.compact(_.flatten(data));\n\n                    setQrCodeArray(final);\n                }\n\n                reader.readAsBinaryString(file);\n            })\n\n        }, [])\n        const { getRootProps, getInputProps } = useDropzone({ onDrop })\n\n        return (\n            <div className=\"bg-white text-center w-full px-4\" {...getRootProps()}>\n                <input {...getInputProps()} />\n                <h2 className=\"font-semibold\">\n                    Upload your file\n                </h2>\n\n\n                <div className=\"border-dashed border-2 border-gray-200 w-full p-6 flex justify-center items-center flex-col my-6\">\n                    <img src={excelLogo} alt=\"Upload excel and generate QRcode\" />\n                    <span className=\"text-gray-400 text-sm\">\n                        Drag & Drop your file here\n                    </span>\n                </div>\n\n            </div>\n        )\n    };\n\n    return (\n        <div>\n            <Navbar />\n\n            <div className=\"container mx-auto px-4 pt-5\">\n\n                <div className=\"grid grid-cols-8 gap-4\">\n                    <div className=\"col-start-2 col-span-6 text-center py-6\">\n                        <h1 className=\"mb-4\">\n                            QR Code generator\n                        </h1>\n                        <p className=\"text-gray-600 text-base font-light\">\n                            Free online Simple QR Code Generator. No sign-up required, You can generate bulk QRcode from excel file. Create and Download unlimited free QR code Images.\n                        </p>\n                    </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 p-4\">\n                    <div className=\"flex flex-col items-center bg-white p-4 pt-8 rounded-lg\">\n                        <h2 className=\"font-semibold mb-5\">\n                            Enter your url or text\n                        </h2>\n                        <QrcodeInput />\n                        <RenderQrCode />\n                        <button onClick={DownloadQrCode}\n                            type=\"button\"\n                            className=\"px-4 py-3 bg-blue-600 rounded-md text-white outline-none focus:ring-4 shadow-lg transform active:scale-x-75 transition-transform mx-5 flex\"\n                        >\n                            <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\" />\n                            </svg>\n                            <span className=\"ml-2\">Download</span>\n                        </button>\n                    </div>\n                    <div className=\"flex flex-col items-center bg-white p-4 pt-8 rounded-lg\">\n                        <MyDropzone />\n                        <button onClick={downloadZip}\n                            type=\"button\"\n                            className={\"px-4 py-3 bg-blue-600 rounded-md text-white outline-none focus:ring-4 shadow-lg transform active:scale-x-75 transition-transform mx-5 flex\" + (qrCodeArray.length <= 0 && ' opacity-50 cursor-not-allowed')}\n                        >\n                            <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\" />\n                            </svg>\n                            <span className=\"ml-2\">Download Zip</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            <Footer />\n\n        </div>\n    );\n}\n\nexport default App;\n",
        "import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",
        "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"
    ],
    "sourceRoot": ""
}